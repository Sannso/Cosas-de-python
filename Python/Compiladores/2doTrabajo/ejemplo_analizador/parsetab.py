
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSANT BOOLEAN BREAK CASE CHAR COLON COMMA DEFAULT DEFINE DEQUAL DISTINT DIVIDE DOT DOUBLE ELSE EQUAL FLOAT FOR GREATER GREATEREQUAL HASHTAG ID IF INCLUDE INT ISEQUAL LBLOCK LBRACKET LESS LESSEQUAL LONG LPAREN MINUS MINUSMINUS NUMBER PLUS PLUSPLUS RBLOCK RBRACKET RETURN RPAREN SEMICOLON SHORT SWITCH TIMES VOID WHILEprogram : declaration_listdeclaration_list : declaration_list  declarationdeclaration_list : declarationdeclaration : var_declaration\n\t\t\t\t  | fun_declaration\n\t\t\t\t  | header_declarationheader_declaration : HASHTAG DEFINE ID NUMBERheader_declaration : HASHTAG INCLUDE ID DOT IDvar_declaration : type_specifier var_declaration2 SEMICOLONvar_declaration : type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLONvar_declaration2 : ID COMMA var_declaration2  \n\t                               | ID\n\t                               | ID EQUAL NUMBER COMMA var_declaration2\n\t                               | ID EQUAL NUMBER\n\t                               | TIMES ID COMMA var_declaration2\n\t                               | TIMES ID\n\t                               | ID EQUAL ID COMMA var_declaration2\n\t                               | ID EQUAL ID\n\t                               | COMMA\n\t                               | TIMES TIMES ID\n\t                               | TIMES TIMES ID COMMA var_declaration2\n\t                               | AMPERSANT ID\n\t                               | AMPERSANT ID COMMA var_declaration2\n\n        type_specifier : INTtype_specifier : VOIDtype_specifier : LONGtype_specifier : SHORTtype_specifier : DOUBLEtype_specifier : FLOATtype_specifier : CHARtype_specifier : BOOLEANfun_declaration : type_specifier ID LPAREN params RPAREN compount_stmtparams : param_listparams : VOIDparam_list : param_list COMMA paramparam_list : paramparam_list : emptyparam : type_specifier IDparam : type_specifier ID LBRACKET RBRACKETcompount_stmt : LBLOCK local_declarations statement_list RBLOCKlocal_declarations : local_declarations var_declarationlocal_declarations : emptystatement_list : statement_list statementstatement_list : emptystatement : expression_stmt\n\t\t\t\t| compount_stmt\n\t\t\t\t| selection_stmt\n\t\t\t\t| iteration_stmt\n\t\t\t\t| return_stmt\n\texpression_stmt : expression SEMICOLONexpression_stmt : SEMICOLONselection_stmt : IF LPAREN expression RPAREN statementselection_stmt : IF LPAREN expression RPAREN statement ELSE statementselection_stmt : SWITCH LPAREN var RPAREN statementselection_stmt : CASE NUMBER COLON statement BREAK SEMICOLONselection_stmt : DEFAULT COLON statement BREAK SEMICOLONiteration_stmt : WHILE LPAREN expression RPAREN statementiteration_stmt : FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statementreturn_stmt : RETURN SEMICOLONreturn_stmt : RETURN expression SEMICOLONexpression : var EQUAL expressionexpression : simple_expressionexpression : var EQUAL AMPERSANT IDvar : IDvar : ID LBRACKET expression RBRACKETsimple_expression : additive_expression relop additive_expressionsimple_expression : additive_expressionrelop : LESS \n\t\t\t| LESSEQUAL\n\t\t\t| GREATER\n\t\t\t| GREATEREQUAL\n\t\t\t| DEQUAL\n\t\t\t| DISTINT\n\t\t\t| ISEQUAL\n\tadditive_expression : additive_expression addop term\n                                              \n        additive_expression : termadditive_expression : term MINUSMINUSadditive_expression : term PLUSPLUSaddop : PLUS \n\t\t\t| MINUS\n\tterm : term mulop factorterm : factormulop : \tTIMES\n\t\t\t\t| DIVIDE\n\tfactor : LPAREN expression RPARENfactor : varfactor : callfactor : NUMBERcall : ID LPAREN args RPARENargs : args_list\n\t\t\t| empty\n\targs_list : args_list COMMA expressionargs_list : expressionempty :'
    
_lr_action_items = {'HASHTAG':([0,2,3,4,5,6,17,25,49,60,61,63,76,],[8,8,-3,-4,-5,-6,-2,-9,-7,-8,-10,-32,-40,]),'INT':([0,2,3,4,5,6,17,25,27,49,54,60,61,63,64,70,71,73,76,],[9,9,-3,-4,-5,-6,-2,-9,9,-7,9,-8,-10,-32,-94,9,-42,-41,-40,]),'VOID':([0,2,3,4,5,6,17,25,27,49,54,60,61,63,64,70,71,73,76,],[10,10,-3,-4,-5,-6,-2,-9,39,-7,10,-8,-10,-32,-94,10,-42,-41,-40,]),'LONG':([0,2,3,4,5,6,17,25,27,49,54,60,61,63,64,70,71,73,76,],[11,11,-3,-4,-5,-6,-2,-9,11,-7,11,-8,-10,-32,-94,11,-42,-41,-40,]),'SHORT':([0,2,3,4,5,6,17,25,27,49,54,60,61,63,64,70,71,73,76,],[12,12,-3,-4,-5,-6,-2,-9,12,-7,12,-8,-10,-32,-94,12,-42,-41,-40,]),'DOUBLE':([0,2,3,4,5,6,17,25,27,49,54,60,61,63,64,70,71,73,76,],[13,13,-3,-4,-5,-6,-2,-9,13,-7,13,-8,-10,-32,-94,13,-42,-41,-40,]),'FLOAT':([0,2,3,4,5,6,17,25,27,49,54,60,61,63,64,70,71,73,76,],[14,14,-3,-4,-5,-6,-2,-9,14,-7,14,-8,-10,-32,-94,14,-42,-41,-40,]),'CHAR':([0,2,3,4,5,6,17,25,27,49,54,60,61,63,64,70,71,73,76,],[15,15,-3,-4,-5,-6,-2,-9,15,-7,15,-8,-10,-32,-94,15,-42,-41,-40,]),'BOOLEAN':([0,2,3,4,5,6,17,25,27,49,54,60,61,63,64,70,71,73,76,],[16,16,-3,-4,-5,-6,-2,-9,16,-7,16,-8,-10,-32,-94,16,-42,-41,-40,]),'$end':([1,2,3,4,5,6,17,25,49,60,61,63,76,],[0,-1,-3,-4,-5,-6,-2,-9,-7,-8,-10,-32,-40,]),'ID':([7,9,10,11,12,13,14,15,16,21,22,23,24,25,28,29,30,36,39,47,48,50,55,56,57,61,64,70,71,72,73,74,75,76,77,78,79,80,81,82,84,86,95,102,103,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,125,128,129,130,136,137,144,151,152,156,157,160,161,162,164,165,168,169,170,171,173,174,],[19,-24,-25,-26,-27,-28,-29,-30,-31,31,32,33,34,-9,42,44,46,52,-25,42,42,60,42,42,42,-10,-94,-94,-42,97,-41,-44,101,-40,-43,-45,-46,-47,-48,-49,-51,97,97,-50,97,134,97,97,97,42,97,97,-68,-69,-70,-71,-72,-73,-74,-79,-80,-59,97,97,97,-83,-84,153,97,-60,97,97,97,97,97,-52,-54,-56,-57,97,-55,97,-53,97,-58,]),'TIMES':([7,9,10,11,12,13,14,15,16,21,28,47,48,55,56,57,75,88,90,97,98,99,100,110,132,142,143,150,158,159,],[21,-24,-25,-26,-27,-28,-29,-30,-31,30,21,21,21,21,21,21,21,-86,-88,-64,129,-82,-87,21,-85,-86,129,-81,-65,-89,]),'COMMA':([7,9,10,11,12,13,14,15,16,19,27,28,31,32,38,40,41,42,44,45,46,47,48,52,55,56,57,65,69,75,88,90,94,96,97,98,99,100,101,110,126,127,132,135,141,142,143,147,149,150,153,158,159,167,],[20,-24,-25,-26,-27,-28,-29,-30,-31,28,-94,20,47,48,54,-36,-37,28,55,56,57,20,20,-38,20,20,20,-35,-39,20,-86,-88,-67,-62,-64,-76,-82,-87,28,20,-77,-78,-85,-61,-66,-86,-75,160,-93,-81,-63,-65,-89,-92,]),'AMPERSANT':([7,9,10,11,12,13,14,15,16,28,47,48,55,56,57,75,106,110,],[22,-24,-25,-26,-27,-28,-29,-30,-31,22,22,22,22,22,22,22,136,22,]),'DEFINE':([8,],[23,]),'INCLUDE':([8,],[24,]),'SEMICOLON':([18,19,20,25,31,32,42,43,44,45,46,51,58,59,61,64,66,67,68,70,71,72,73,74,76,77,78,79,80,81,82,83,84,88,90,94,95,96,97,98,99,100,101,102,108,122,123,126,127,132,135,137,140,141,142,143,144,150,151,152,153,155,156,158,159,161,162,163,164,165,166,168,169,171,173,174,],[25,-12,-19,-9,-16,-22,-12,-11,-18,-14,-20,61,-15,-23,-10,-94,-17,-13,-21,-94,-42,84,-41,-44,-40,-43,-45,-46,-47,-48,-49,102,-51,-86,-88,-67,122,-62,-64,-76,-82,-87,-12,-50,84,-59,144,-77,-78,-85,-61,84,157,-66,-86,-75,-60,-81,84,84,-63,164,84,-65,-89,-52,-54,169,-56,-57,170,84,-55,-53,84,-58,]),'LBRACKET':([19,52,97,101,134,],[26,62,124,26,124,]),'LPAREN':([19,25,61,64,70,71,72,73,74,76,77,78,79,80,81,82,84,85,86,87,92,93,95,97,102,103,106,108,109,111,112,113,114,115,116,117,118,119,120,121,122,124,125,128,129,130,137,144,151,152,156,157,160,161,162,164,165,168,169,170,171,173,174,],[27,-9,-10,-94,-94,-42,86,-41,-44,-40,-43,-45,-46,-47,-48,-49,-51,103,86,105,109,110,86,125,-50,86,86,86,86,86,86,-68,-69,-70,-71,-72,-73,-74,-79,-80,-59,86,86,86,-83,-84,86,-60,86,86,86,86,86,-52,-54,-56,-57,86,-55,86,-53,86,-58,]),'EQUAL':([19,42,88,97,101,158,],[29,29,106,-64,29,-65,]),'RBLOCK':([25,61,64,70,71,72,73,74,76,77,78,79,80,81,82,84,102,122,144,161,162,164,165,169,171,174,],[-9,-10,-94,-94,-42,76,-41,-44,-40,-43,-45,-46,-47,-48,-49,-51,-50,-59,-60,-52,-54,-56,-57,-55,-53,-58,]),'LBLOCK':([25,53,61,64,70,71,72,73,74,76,77,78,79,80,81,82,84,102,108,122,137,144,151,152,156,161,162,164,165,168,169,171,173,174,],[-9,64,-10,-94,-94,-42,64,-41,-44,-40,-43,-45,-46,-47,-48,-49,-51,-50,64,-59,64,-60,64,64,64,-52,-54,-56,-57,64,-55,-53,64,-58,]),'IF':([25,61,64,70,71,72,73,74,76,77,78,79,80,81,82,84,102,108,122,137,144,151,152,156,161,162,164,165,168,169,171,173,174,],[-9,-10,-94,-94,-42,85,-41,-44,-40,-43,-45,-46,-47,-48,-49,-51,-50,85,-59,85,-60,85,85,85,-52,-54,-56,-57,85,-55,-53,85,-58,]),'SWITCH':([25,61,64,70,71,72,73,74,76,77,78,79,80,81,82,84,102,108,122,137,144,151,152,156,161,162,164,165,168,169,171,173,174,],[-9,-10,-94,-94,-42,87,-41,-44,-40,-43,-45,-46,-47,-48,-49,-51,-50,87,-59,87,-60,87,87,87,-52,-54,-56,-57,87,-55,-53,87,-58,]),'CASE':([25,61,64,70,71,72,73,74,76,77,78,79,80,81,82,84,102,108,122,137,144,151,152,156,161,162,164,165,168,169,171,173,174,],[-9,-10,-94,-94,-42,89,-41,-44,-40,-43,-45,-46,-47,-48,-49,-51,-50,89,-59,89,-60,89,89,89,-52,-54,-56,-57,89,-55,-53,89,-58,]),'DEFAULT':([25,61,64,70,71,72,73,74,76,77,78,79,80,81,82,84,102,108,122,137,144,151,152,156,161,162,164,165,168,169,171,173,174,],[-9,-10,-94,-94,-42,91,-41,-44,-40,-43,-45,-46,-47,-48,-49,-51,-50,91,-59,91,-60,91,91,91,-52,-54,-56,-57,91,-55,-53,91,-58,]),'WHILE':([25,61,64,70,71,72,73,74,76,77,78,79,80,81,82,84,102,108,122,137,144,151,152,156,161,162,164,165,168,169,171,173,174,],[-9,-10,-94,-94,-42,92,-41,-44,-40,-43,-45,-46,-47,-48,-49,-51,-50,92,-59,92,-60,92,92,92,-52,-54,-56,-57,92,-55,-53,92,-58,]),'FOR':([25,61,64,70,71,72,73,74,76,77,78,79,80,81,82,84,102,108,122,137,144,151,152,156,161,162,164,165,168,169,171,173,174,],[-9,-10,-94,-94,-42,93,-41,-44,-40,-43,-45,-46,-47,-48,-49,-51,-50,93,-59,93,-60,93,93,93,-52,-54,-56,-57,93,-55,-53,93,-58,]),'RETURN':([25,61,64,70,71,72,73,74,76,77,78,79,80,81,82,84,102,108,122,137,144,151,152,156,161,162,164,165,168,169,171,173,174,],[-9,-10,-94,-94,-42,95,-41,-44,-40,-43,-45,-46,-47,-48,-49,-51,-50,95,-59,95,-60,95,95,95,-52,-54,-56,-57,95,-55,-53,95,-58,]),'NUMBER':([25,26,29,33,61,64,70,71,72,73,74,76,77,78,79,80,81,82,84,86,89,95,102,103,106,108,109,111,112,113,114,115,116,117,118,119,120,121,122,124,125,128,129,130,137,144,151,152,156,157,160,161,162,164,165,168,169,170,171,173,174,],[-9,35,45,49,-10,-94,-94,-42,90,-41,-44,-40,-43,-45,-46,-47,-48,-49,-51,90,107,90,-50,90,90,90,90,90,90,-68,-69,-70,-71,-72,-73,-74,-79,-80,-59,90,90,90,-83,-84,90,-60,90,90,90,90,90,-52,-54,-56,-57,90,-55,90,-53,90,-58,]),'RPAREN':([27,37,38,39,40,41,52,65,69,88,90,94,96,97,98,99,100,104,125,126,127,131,132,133,134,135,139,141,142,143,146,147,148,149,150,153,158,159,167,172,],[-94,53,-33,-34,-36,-37,-38,-35,-39,-86,-88,-67,-62,-64,-76,-82,-87,132,-94,-77,-78,151,-85,152,-64,-61,156,-66,-86,-75,159,-90,-91,-93,-81,-63,-65,-89,-92,173,]),'DOT':([34,],[50,]),'RBRACKET':([35,62,88,90,94,96,97,98,99,100,126,127,132,135,141,142,143,145,150,153,158,159,],[51,69,-86,-88,-67,-62,-64,-76,-82,-87,-77,-78,-85,-61,-66,-86,-75,158,-81,-63,-65,-89,]),'BREAK':([76,78,79,80,81,82,84,102,122,138,144,154,161,162,164,165,169,171,174,],[-40,-45,-46,-47,-48,-49,-51,-50,-59,155,-60,163,-52,-54,-56,-57,-55,-53,-58,]),'ELSE':([76,78,79,80,81,82,84,102,122,144,161,162,164,165,169,171,174,],[-40,-45,-46,-47,-48,-49,-51,-50,-59,-60,168,-54,-56,-57,-55,-53,-58,]),'MINUSMINUS':([88,90,97,98,99,100,132,142,150,158,159,],[-86,-88,-64,126,-82,-87,-85,-86,-81,-65,-89,]),'PLUSPLUS':([88,90,97,98,99,100,132,142,150,158,159,],[-86,-88,-64,127,-82,-87,-85,-86,-81,-65,-89,]),'DIVIDE':([88,90,97,98,99,100,132,142,143,150,158,159,],[-86,-88,-64,130,-82,-87,-85,-86,130,-81,-65,-89,]),'LESS':([88,90,94,97,98,99,100,126,127,132,142,143,150,158,159,],[-86,-88,113,-64,-76,-82,-87,-77,-78,-85,-86,-75,-81,-65,-89,]),'LESSEQUAL':([88,90,94,97,98,99,100,126,127,132,142,143,150,158,159,],[-86,-88,114,-64,-76,-82,-87,-77,-78,-85,-86,-75,-81,-65,-89,]),'GREATER':([88,90,94,97,98,99,100,126,127,132,142,143,150,158,159,],[-86,-88,115,-64,-76,-82,-87,-77,-78,-85,-86,-75,-81,-65,-89,]),'GREATEREQUAL':([88,90,94,97,98,99,100,126,127,132,142,143,150,158,159,],[-86,-88,116,-64,-76,-82,-87,-77,-78,-85,-86,-75,-81,-65,-89,]),'DEQUAL':([88,90,94,97,98,99,100,126,127,132,142,143,150,158,159,],[-86,-88,117,-64,-76,-82,-87,-77,-78,-85,-86,-75,-81,-65,-89,]),'DISTINT':([88,90,94,97,98,99,100,126,127,132,142,143,150,158,159,],[-86,-88,118,-64,-76,-82,-87,-77,-78,-85,-86,-75,-81,-65,-89,]),'ISEQUAL':([88,90,94,97,98,99,100,126,127,132,142,143,150,158,159,],[-86,-88,119,-64,-76,-82,-87,-77,-78,-85,-86,-75,-81,-65,-89,]),'PLUS':([88,90,94,97,98,99,100,126,127,132,141,142,143,150,158,159,172,],[-86,-88,120,-64,-76,-82,-87,-77,-78,-85,120,-86,-75,-81,-65,-89,120,]),'MINUS':([88,90,94,97,98,99,100,126,127,132,141,142,143,150,158,159,172,],[-86,-88,121,-64,-76,-82,-87,-77,-78,-85,121,-86,-75,-81,-65,-89,121,]),'COLON':([91,107,],[108,137,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,17,]),'var_declaration':([0,2,70,],[4,4,73,]),'fun_declaration':([0,2,],[5,5,]),'header_declaration':([0,2,],[6,6,]),'type_specifier':([0,2,27,54,70,],[7,7,36,36,75,]),'var_declaration2':([7,28,47,48,55,56,57,75,110,],[18,43,58,59,66,67,68,18,140,]),'params':([27,],[37,]),'param_list':([27,],[38,]),'param':([27,54,],[40,65,]),'empty':([27,64,70,125,],[41,71,74,148,]),'compount_stmt':([53,72,108,137,151,152,156,168,173,],[63,79,79,79,79,79,79,79,79,]),'local_declarations':([64,],[70,]),'statement_list':([70,],[72,]),'statement':([72,108,137,151,152,156,168,173,],[77,138,154,161,162,165,171,174,]),'expression_stmt':([72,108,137,151,152,156,168,173,],[78,78,78,78,78,78,78,78,]),'selection_stmt':([72,108,137,151,152,156,168,173,],[80,80,80,80,80,80,80,80,]),'iteration_stmt':([72,108,137,151,152,156,168,173,],[81,81,81,81,81,81,81,81,]),'return_stmt':([72,108,137,151,152,156,168,173,],[82,82,82,82,82,82,82,82,]),'expression':([72,86,95,103,106,108,109,124,125,137,151,152,156,157,160,168,173,],[83,104,123,131,135,83,139,145,149,83,83,83,83,166,167,83,83,]),'var':([72,86,95,103,105,106,108,109,111,112,124,125,128,137,151,152,156,157,160,168,170,173,],[88,88,88,88,133,88,88,88,142,142,88,88,142,88,88,88,88,88,88,88,142,88,]),'additive_expression':([72,86,95,103,106,108,109,111,124,125,137,151,152,156,157,160,168,170,173,],[94,94,94,94,94,94,94,141,94,94,94,94,94,94,94,94,94,172,94,]),'simple_expression':([72,86,95,103,106,108,109,124,125,137,151,152,156,157,160,168,173,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'term':([72,86,95,103,106,108,109,111,112,124,125,137,151,152,156,157,160,168,170,173,],[98,98,98,98,98,98,98,98,143,98,98,98,98,98,98,98,98,98,98,98,]),'factor':([72,86,95,103,106,108,109,111,112,124,125,128,137,151,152,156,157,160,168,170,173,],[99,99,99,99,99,99,99,99,99,99,99,150,99,99,99,99,99,99,99,99,99,]),'call':([72,86,95,103,106,108,109,111,112,124,125,128,137,151,152,156,157,160,168,170,173,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'relop':([94,],[111,]),'addop':([94,141,172,],[112,112,112,]),'mulop':([98,143,],[128,128,]),'args':([125,],[146,]),'args_list':([125,],[147,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','minic_parser.py',9),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_1','minic_parser.py',13),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_2','minic_parser.py',17),
  ('declaration -> var_declaration','declaration',1,'p_declaration','minic_parser.py',21),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','minic_parser.py',22),
  ('declaration -> header_declaration','declaration',1,'p_declaration','minic_parser.py',23),
  ('header_declaration -> HASHTAG DEFINE ID NUMBER','header_declaration',4,'p_header_declaration_1','minic_parser.py',27),
  ('header_declaration -> HASHTAG INCLUDE ID DOT ID','header_declaration',5,'p_header_declaration_2','minic_parser.py',31),
  ('var_declaration -> type_specifier var_declaration2 SEMICOLON','var_declaration',3,'p_var_declaration_1','minic_parser.py',35),
  ('var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON','var_declaration',6,'p_var_declaration_2','minic_parser.py',39),
  ('var_declaration2 -> ID COMMA var_declaration2','var_declaration2',3,'p_var_declaration_3','minic_parser.py',43),
  ('var_declaration2 -> ID','var_declaration2',1,'p_var_declaration_3','minic_parser.py',44),
  ('var_declaration2 -> ID EQUAL NUMBER COMMA var_declaration2','var_declaration2',5,'p_var_declaration_3','minic_parser.py',45),
  ('var_declaration2 -> ID EQUAL NUMBER','var_declaration2',3,'p_var_declaration_3','minic_parser.py',46),
  ('var_declaration2 -> TIMES ID COMMA var_declaration2','var_declaration2',4,'p_var_declaration_3','minic_parser.py',47),
  ('var_declaration2 -> TIMES ID','var_declaration2',2,'p_var_declaration_3','minic_parser.py',48),
  ('var_declaration2 -> ID EQUAL ID COMMA var_declaration2','var_declaration2',5,'p_var_declaration_3','minic_parser.py',49),
  ('var_declaration2 -> ID EQUAL ID','var_declaration2',3,'p_var_declaration_3','minic_parser.py',50),
  ('var_declaration2 -> COMMA','var_declaration2',1,'p_var_declaration_3','minic_parser.py',51),
  ('var_declaration2 -> TIMES TIMES ID','var_declaration2',3,'p_var_declaration_3','minic_parser.py',52),
  ('var_declaration2 -> TIMES TIMES ID COMMA var_declaration2','var_declaration2',5,'p_var_declaration_3','minic_parser.py',53),
  ('var_declaration2 -> AMPERSANT ID','var_declaration2',2,'p_var_declaration_3','minic_parser.py',54),
  ('var_declaration2 -> AMPERSANT ID COMMA var_declaration2','var_declaration2',4,'p_var_declaration_3','minic_parser.py',55),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier_1','minic_parser.py',61),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier_2','minic_parser.py',65),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier_3','minic_parser.py',69),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier_4','minic_parser.py',73),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier_5','minic_parser.py',77),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier_6','minic_parser.py',81),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier_7','minic_parser.py',85),
  ('type_specifier -> BOOLEAN','type_specifier',1,'p_type_specifier_8','minic_parser.py',89),
  ('fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt','fun_declaration',6,'p_fun_declaration','minic_parser.py',93),
  ('params -> param_list','params',1,'p_params_1','minic_parser.py',97),
  ('params -> VOID','params',1,'p_params_2','minic_parser.py',101),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list_1','minic_parser.py',105),
  ('param_list -> param','param_list',1,'p_param_list_2','minic_parser.py',109),
  ('param_list -> empty','param_list',1,'p_param_list_3','minic_parser.py',113),
  ('param -> type_specifier ID','param',2,'p_param_1','minic_parser.py',117),
  ('param -> type_specifier ID LBRACKET RBRACKET','param',4,'p_param_2','minic_parser.py',121),
  ('compount_stmt -> LBLOCK local_declarations statement_list RBLOCK','compount_stmt',4,'p_compount_stmt','minic_parser.py',125),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations_1','minic_parser.py',129),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations_2','minic_parser.py',133),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_1','minic_parser.py',137),
  ('statement_list -> empty','statement_list',1,'p_statement_list_2','minic_parser.py',141),
  ('statement -> expression_stmt','statement',1,'p_statement','minic_parser.py',145),
  ('statement -> compount_stmt','statement',1,'p_statement','minic_parser.py',146),
  ('statement -> selection_stmt','statement',1,'p_statement','minic_parser.py',147),
  ('statement -> iteration_stmt','statement',1,'p_statement','minic_parser.py',148),
  ('statement -> return_stmt','statement',1,'p_statement','minic_parser.py',149),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt_1','minic_parser.py',154),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt_2','minic_parser.py',158),
  ('selection_stmt -> IF LPAREN expression RPAREN statement','selection_stmt',5,'p_selection_stmt_1','minic_parser.py',162),
  ('selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement','selection_stmt',7,'p_selection_stmt_2','minic_parser.py',166),
  ('selection_stmt -> SWITCH LPAREN var RPAREN statement','selection_stmt',5,'p_selection_stmt_3','minic_parser.py',170),
  ('selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON','selection_stmt',6,'p_selection_stmt_4','minic_parser.py',174),
  ('selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON','selection_stmt',5,'p_selection_stmt_5','minic_parser.py',178),
  ('iteration_stmt -> WHILE LPAREN expression RPAREN statement','iteration_stmt',5,'p_iteration_stmt_1','minic_parser.py',182),
  ('iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement','iteration_stmt',9,'p_iteration_stmt_2','minic_parser.py',188),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt_1','minic_parser.py',192),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt_2','minic_parser.py',196),
  ('expression -> var EQUAL expression','expression',3,'p_expression_1','minic_parser.py',200),
  ('expression -> simple_expression','expression',1,'p_expression_2','minic_parser.py',204),
  ('expression -> var EQUAL AMPERSANT ID','expression',4,'p_expression_3','minic_parser.py',208),
  ('var -> ID','var',1,'p_var_1','minic_parser.py',212),
  ('var -> ID LBRACKET expression RBRACKET','var',4,'p_var_2','minic_parser.py',216),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression_1','minic_parser.py',220),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression_2','minic_parser.py',224),
  ('relop -> LESS','relop',1,'p_relop','minic_parser.py',229),
  ('relop -> LESSEQUAL','relop',1,'p_relop','minic_parser.py',230),
  ('relop -> GREATER','relop',1,'p_relop','minic_parser.py',231),
  ('relop -> GREATEREQUAL','relop',1,'p_relop','minic_parser.py',232),
  ('relop -> DEQUAL','relop',1,'p_relop','minic_parser.py',233),
  ('relop -> DISTINT','relop',1,'p_relop','minic_parser.py',234),
  ('relop -> ISEQUAL','relop',1,'p_relop','minic_parser.py',235),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression_1','minic_parser.py',240),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression_2','minic_parser.py',246),
  ('additive_expression -> term MINUSMINUS','additive_expression',2,'p_additive_expression_3','minic_parser.py',250),
  ('additive_expression -> term PLUSPLUS','additive_expression',2,'p_additive_expression_4','minic_parser.py',254),
  ('addop -> PLUS','addop',1,'p_addop','minic_parser.py',258),
  ('addop -> MINUS','addop',1,'p_addop','minic_parser.py',259),
  ('term -> term mulop factor','term',3,'p_term_1','minic_parser.py',264),
  ('term -> factor','term',1,'p_term_2','minic_parser.py',268),
  ('mulop -> TIMES','mulop',1,'p_mulop','minic_parser.py',274),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','minic_parser.py',275),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_1','minic_parser.py',280),
  ('factor -> var','factor',1,'p_factor_2','minic_parser.py',284),
  ('factor -> call','factor',1,'p_factor_3','minic_parser.py',288),
  ('factor -> NUMBER','factor',1,'p_factor_4','minic_parser.py',292),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','minic_parser.py',298),
  ('args -> args_list','args',1,'p_args','minic_parser.py',302),
  ('args -> empty','args',1,'p_args','minic_parser.py',303),
  ('args_list -> args_list COMMA expression','args_list',3,'p_args_list_1','minic_parser.py',308),
  ('args_list -> expression','args_list',1,'p_args_list_2','minic_parser.py',312),
  ('empty -> <empty>','empty',0,'p_empty','minic_parser.py',316),
]
